AWSTemplateFormatVersion: "2010-09-09"
Description: "Media Insight Engine - Operator library"

Mappings:
  SourceCode:
    General:
      RegionalS3Bucket: "%%REGIONAL_BUCKET_NAME%%"
      CodeKeyPrefix: "aws-media-insights-engine/%%VERSION%%"

Parameters:
  DataPlaneEndpoint:
    Type: "String"
    Description: "Name of the dataplane handler lambda function"
  DataPlaneBucket:
    Type: "String"
    Description: "Bucket for the dataplane"
  ExternalBucketArn:
    Type: "String"
    Description: "The ARN for Amazon S3 resources that exist outside the MIE stack which may need to be used as inputs to MIE workflows"
  DataPlaneHandlerArn:
    Type: "String"
    Description: "Arn of dataplane lambda handler"
  WorkflowCustomResourceArn:
    Type: String
    Description: "ARN of the Media insights custom resource that handles creating operations, stages and workflows"
  MediaInsightsEnginePython38Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.8) that contains basic python dependencies for boto3, chalice, control plane and dataplane"
  MediaInsightsEnginePython37Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.7) that contains basic python dependencies for boto3, chalice, control plane and dataplane"
  MediaInsightsEnginePython36Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.6) that contains basic python dependencies for boto3, chalice, control plane and dataplane"
  StartWaitOperationLambda:
    Type: String
    Description: "ARN of control plane lambda function to set a workflow to Waiting state"
  CheckWaitOperationLambda:
    Type: String
    Description: "ARN of control plane lambda function to if a workflow is in Waiting state"
  MediaConvertEndpoint:
    Type: String
    Description: "Account-specific endpoint URL for MediaConvert"
  Boto3UserAgent:
    Type: String
    Description: "Boto3 user agent string"

Conditions:
  AllowAccessToExternalBucket: !Not
    - !Equals [!Ref "ExternalBucketArn", ""]

Resources:
  # IAM Roles:

  genericDataLookupLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "GenericDataLookupLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediainfoLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "mediainfoLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediaConvertS3Role:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "MediaconvertAllowS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediaConvertLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "MediaConvertLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  [
                      "mediaconvert:GetJob",
                      "mediaconvert:ListJobs",
                      "mediaconvert:DescribeEndpoints",
                      "mediaconvert:CreateJob"
                  ]
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: "Allow"
              - Action:
                  - "iam:PassRole"
                Resource: !GetAtt "mediaConvertS3Role.Arn"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Lambda functions

  # This is a generic Lambda function for getting metadata from JSON file in S3:
  startGenericDataLookup:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "generic_data_lookup.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt genericDataLookupLambdaRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "generic_data_lookup.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "GenericDataLookup"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DataLookupRole: !GetAtt genericDataLookupLambdaRole.Arn
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Mediainfo

  Mediainfo:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "mediainfo.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython37Layer
      Role: !GetAtt mediainfoLambdaRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "mediainfo.zip",
            ],
          ]
      Runtime: "python3.7"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "Mediainfo"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DataLookupRole: !GetAtt mediainfoLambdaRole.Arn
          LD_LIBRARY_PATH: "/opt/python/"
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Mediaconvert Lambdas

  StartMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_media_convert.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_media_convert.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          MEDIACONVERT_ENDPOINT: !Ref "MediaConvertEndpoint"
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  StartThumbnailFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_thumbnail.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_thumbnail.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckThumbnailFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_thumbnail.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_thumbnail.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_media_convert.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_media_convert.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          MEDIACONVERT_ENDPOINT: !Ref "MediaConvertEndpoint"
          botoConfig: !Ref "Boto3UserAgent"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Register as operators in the control plane

  GenericDataLookupOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "GenericDataLookup"
      Type: "Sync"
      Configuration: { "MediaType": "Video", "Enabled": false }
      StartLambdaArn: !GetAtt startGenericDataLookup.Arn

  MediainfoOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Mediainfo"
      Type: "Sync"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt Mediainfo.Arn

  MediainfoOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "MediainfoImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt Mediainfo.Arn

  MediaconvertOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Mediaconvert"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt StartMediaConvertFunction.Arn
      MonitorLambdaArn: !GetAtt CheckMediaConvertFunction.Arn

  ThumbnailOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Thumbnail"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt StartThumbnailFunction.Arn
      MonitorLambdaArn: !GetAtt CheckThumbnailFunction.Arn

  WaitOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Wait"
      Type: "Async"
      Configuration: { "MediaType": "MetadataOnly", "Enabled": false }
      StartLambdaArn: !Ref StartWaitOperationLambda
      MonitorLambdaArn: !Ref CheckWaitOperationLambda

  # Export operator names as outputs

Outputs:
  GenericDataLookupOperation:
    Description: "Operation name of GenericDataLookup"
    Value: !GetAtt GenericDataLookupOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", GenericDataLookup]]
  MediainfoOperation:
    Description: "Operation name of Mediainfo"
    Value: !GetAtt MediainfoOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Mediainfo]]
  MediainfoOperationImage:
    Description: "Operation name of MediainfoImage"
    Value: !GetAtt MediainfoOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", MediainfoImage]]
  MediaconvertOperation:
    Description: "Operation name of mediaconvert"
    Value: !GetAtt MediaconvertOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Mediaconvert]]
  ThumbnailOperation:
    Description: "Operation name of thumbnail"
    Value: !GetAtt ThumbnailOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Thumbnail]]
  WaitOperation:
    Description: "Wait operator - wait until /workflow/execution/continue API is called"
    Value: !GetAtt WaitOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Wait]]
  StackName:
    Value: !Ref AWS::StackName
